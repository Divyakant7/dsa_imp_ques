/*
here are a total of numCourses courses you have to take, labeled from 0 to numCourses - 1. You are given an array prerequisites where prerequisites[i] = [ai, bi] indicates that you must take course bi first if you want to take course ai.

For example, the pair [0, 1], indicates that to take course 0 you have to first take course 1.
Return true if you can finish all courses. Otherwise, return false.

 

Example 1:

Input: numCourses = 2, prerequisites = [[1,0]]
Output: true
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0. So it is possible.
Example 2:

Input: numCourses = 2, prerequisites = [[1,0],[0,1]]
Output: false
Explanation: There are a total of 2 courses to take. 
To take course 1 you should have finished course 0, and to take course 0 you should also have finished course 1. So it is impossible.

*/

bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        vector<int>adj[numCourses];
        vector<int>in(numCourses,0);
        int count = 0;
        for(auto it:prerequisites){
            int a = it[0];
            int b = it[1];
            in[a]++;
            //adj[a].push_back(b);
            adj[b].push_back(a);
        }
        queue<int>q;
        for(int i =0;i<numCourses;i++){
            if(in[i]==0){
                q.push(i);
            }
        }
        if(q.empty())return false;
        while(!q.empty()){
            int node = q.front();
            q.pop();
            count++;
            for(int child:adj[node]){
                in[child]--;
                if(in[child]==0){
                    q.push(child);
                }
            }
        }
        if(numCourses==count)return true;
        return false;
    }
};
