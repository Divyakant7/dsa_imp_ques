void Nearest_smallest_left(vector<int>& nsl,vector<int> & arr){
        stack<int> st; //stack used to store the index;
        for(int i=0;i<arr.size();i++){
            while(!st.empty() && arr[i]<=arr[st.top()])
                st.pop();
            if(st.empty())
                nsl.push_back(-1);
            else
                nsl.push_back(st.top());
            
            st.push(i);
        }
    }
    
    void Nearest_smallest_right(vector<int>& nsr,vector<int> & arr){
        stack<int> st;
        for(int i=arr.size()-1;i>=0;i--){
            while(!st.empty() && arr[i]<=arr[st.top()])
                st.pop();
            
            if(st.empty())
                nsr.push_back(arr.size());
            else 
                nsr.push_back(st.top());
            
            st.push(i);
        }
        reverse(nsr.begin(),nsr.end());
    } 
    
    
    int largestRectangleArea(vector<int>& heights) {
        vector<int> nsl;   //nearest_smallest_from left;
        vector<int> nsr;   //neatest_smallest_from right;
        Nearest_smallest_left(nsl,heights);
        Nearest_smallest_right(nsr,heights);
        
        int ans=0;
        int area=0;
        for(int i=0;i<nsl.size();i++){
            cout<<nsr[i]<<"  "<<nsl[i]<<endl;
        }
        
        for(int i=0;i<heights.size();i++){
            area=heights[i]*(nsr[i]-nsl[i]-1);
            if(ans<area)
                ans=area;
        }
        
        return ans;
        
    }
    
    
    int maximalRectangle(vector<vector<char>>& matrix) {
        
        if (matrix.empty() || matrix.front().empty()) {
            return 0;
        }
        vector<int>arr(matrix[0].size(),0);
        int area = 0,maxarea = -1;
        for(int i = 0;i<matrix.size();i++){
            for(int j = 0;j<matrix[0].size();j++){
                if(matrix[i][j]=='0'){
                    arr[j] = 0;
                }
                else{
                    arr[j]+=1;
                }
            }
            area = largestRectangleArea(arr);
        maxarea = max(maxarea,area);
        }
        
        return maxarea;
    }
